#!/bin/bash

# Repository Structure Setup Script
# This script creates standardized folder structure for the repository

set -e

# Script configuration
SCRIPT_NAME="setup-repo-structure.sh"
SCRIPT_VERSION="1.0.0"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Default directories to create
DEFAULT_DIRS=(
    "docs"
    "assets"
    "scripts"
    "src"
    "tests"
)

# Function to print colored output
print_status() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Function to print help
print_help() {
    cat << EOF
${SCRIPT_NAME} v${SCRIPT_VERSION}

DESCRIPTION:
    Creates standardized repository directory structure.

USAGE:
    ${SCRIPT_NAME} [OPTIONS]

OPTIONS:
    -h, --help          Show this help message
    -v, --verbose       Enable verbose output
    -d, --dry-run       Show what would be done without making changes
    --dirs "dir1 dir2"  Specify custom directories (space-separated)

EXAMPLES:
    ${SCRIPT_NAME}                    # Create default structure
    ${SCRIPT_NAME} -v                 # Verbose output
    ${SCRIPT_NAME} -d                 # Dry run
    ${SCRIPT_NAME} --dirs "docs src"  # Custom directories

DEFAULT DIRECTORIES:
    docs/     - Documentation files
    assets/   - Images, media, and resource files
    scripts/  - Automation and utility scripts
    src/      - Source code
    tests/    - Test files and validation scripts

EOF
}

# Function to create directory structure
create_directory_structure() {
    local dirs=("$@")
    local created_count=0
    
    print_status $BLUE "Creating repository directory structure..."
    
    for dir in "${dirs[@]}"; do
        if [[ "$DRY_RUN" == "true" ]]; then
            if [[ ! -d "$dir" ]]; then
                print_status $YELLOW "[DRY RUN] Would create directory: $dir"
                ((created_count++))
            else
                print_status $YELLOW "[DRY RUN] Directory already exists: $dir"
            fi
        else
            if [[ ! -d "$dir" ]]; then
                mkdir -p "$dir"
                print_status $GREEN "Created directory: $dir"
                ((created_count++))
            else
                if [[ "$VERBOSE" == "true" ]]; then
                    print_status $YELLOW "Directory already exists: $dir"
                fi
            fi
        fi
    done
    
    if [[ "$DRY_RUN" == "true" ]]; then
        print_status $BLUE "Dry run completed. Would create $created_count directories."
    else
        print_status $GREEN "Repository structure setup completed. Created $created_count directories."
    fi
}

# Function to create README files for empty directories
create_readme_files() {
    local dirs=("$@")
    
    for dir in "${dirs[@]}"; do
        local readme_file="$dir/README.md"
        
        if [[ "$DRY_RUN" == "true" ]]; then
            if [[ ! -f "$readme_file" ]]; then
                print_status $YELLOW "[DRY RUN] Would create README: $readme_file"
            fi
        else
            if [[ ! -f "$readme_file" ]]; then
                cat > "$readme_file" << EOF
# $(basename "$dir" | tr '[:lower:]' '[:upper:]')

This directory contains $(get_directory_description "$dir").

## Structure
- Add relevant files and subdirectories as needed
- Follow project conventions for naming and organization

## Contributing
- Ensure all files are properly documented
- Follow the project's coding standards
- Update this README when adding new content

---
*This README was automatically generated by the repository setup script.*
EOF
                print_status $GREEN "Created README: $readme_file"
            fi
        fi
    done
}

# Function to get directory description
get_directory_description() {
    local dir=$1
    case "$dir" in
        "docs")
            echo "documentation files, guides, and project information"
            ;;
        "assets")
            echo "images, media files, and static resources"
            ;;
        "scripts")
            echo "automation scripts, utilities, and development tools"
            ;;
        "src")
            echo "source code and main project files"
            ;;
        "tests")
            echo "test files, validation scripts, and testing utilities"
            ;;
        *)
            echo "project files and resources"
            ;;
    esac
}

# Function to validate environment
validate_environment() {
    if [[ ! -d ".git" ]]; then
        print_status $RED "Error: Not in a Git repository root directory"
        exit 1
    fi
    
    if [[ ! -w "." ]]; then
        print_status $RED "Error: No write permission in current directory"
        exit 1
    fi
}

# Main function
main() {
    local dirs=("${DEFAULT_DIRS[@]}")
    local verbose=false
    local dry_run=false
    
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                print_help
                exit 0
                ;;
            -v|--verbose)
                verbose=true
                shift
                ;;
            -d|--dry-run)
                dry_run=true
                shift
                ;;
            --dirs)
                if [[ -n "$2" ]]; then
                    IFS=' ' read -ra dirs <<< "$2"
                    shift 2
                else
                    print_status $RED "Error: --dirs requires a space-separated list of directories"
                    exit 1
                fi
                ;;
            *)
                print_status $RED "Error: Unknown option $1"
                print_help
                exit 1
                ;;
        esac
    done
    
    # Set global variables
    VERBOSE=$verbose
    DRY_RUN=$dry_run
    
    # Validate environment
    validate_environment
    
    # Display configuration
    if [[ "$verbose" == "true" ]]; then
        print_status $BLUE "Repository Structure Setup"
        print_status $BLUE "========================="
        print_status $BLUE "Script: $SCRIPT_NAME v$SCRIPT_VERSION"
        print_status $BLUE "Working directory: $(pwd)"
        print_status $BLUE "Directories to create: ${dirs[*]}"
        print_status $BLUE "Dry run: $dry_run"
        print_status $BLUE "Verbose: $verbose"
        echo
    fi
    
    # Create directory structure
    create_directory_structure "${dirs[@]}"
    
    # Create README files
    if [[ "$dry_run" != "true" ]]; then
        create_readme_files "${dirs[@]}"
    fi
    
    print_status $GREEN "Repository setup completed successfully!"
}

# Execute main function
main "$@"